#!/usr/bin/env python3
"""
Consolidated setup script for HADES test databases on bare metal installation.

This script sets up both PostgreSQL and ArangoDB test databases for HADES testing in a native environment.
It creates the necessary users, databases, collections, and indexes directly on the host system.
"""
import os
import sys
import argparse
import uuid
import getpass
from pathlib import Path
from datetime import datetime, timezone

import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from arango import ArangoClient, ArangoError

# Add the parent directory to sys.path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Try to import dotenv for environment variable loading
try:
    from dotenv import load_dotenv
    # Load environment variables from .env file
    env_file = project_root / ".env"
    if env_file.exists():
        load_dotenv(env_file)
        print(f"Loaded environment variables from {env_file}")
except ImportError:
    print("Warning: python-dotenv not installed. Using environment variables only.")

# Import logger
from src.utils.logger import get_logger
logger = get_logger(__name__)


class TestDatabaseSetup:
    """Setup class for HADES test databases."""

    def __init__(self, force=False):
        """
        Initialize the test database setup.
        
        Args:
            force: Whether to force recreate databases if they exist
        """
        self.force = force
        
        # PostgreSQL configuration
        self.pg_config = {
            "host": os.environ.get("HADES_PG_HOST", "localhost"),
            "port": os.environ.get("HADES_PG_PORT", "5432"),
            "user": os.environ.get("HADES_PG_USER", "hades"),
            "password": os.environ.get("HADES_PG_PASSWORD", "o$n^3W%QD0HGWxH!"),
            "database": os.environ.get("HADES_PG_DATABASE", "hades_auth")
        }
        
        # ArangoDB configuration
        self.arango_config = {
            "host": os.environ.get("HADES_ARANGO_HOST", "http://localhost:8529"),
            "username": os.environ.get("HADES_ARANGO_USER", "hades"),
            "password": os.environ.get("HADES_ARANGO_PASSWORD", "dpvL#tocbHQeKBd4"),
            "database": os.environ.get("HADES_ARANGO_DATABASE", "hades_graph")
        }
        
        # Ensure ArangoDB host has a scheme and port
        if not self.arango_config["host"].startswith(("http://", "https://")):
            self.arango_config["host"] = "http://" + self.arango_config["host"]
        
        # Ensure port is specified
        if ":8529" not in self.arango_config["host"] and not any(char.isdigit() for char in self.arango_config["host"].split("/")[-1]):
            # Add default port if no port is specified
            parsed_url = self.arango_config["host"].rstrip("/")
            self.arango_config["host"] = f"{parsed_url}:8529"
        
        # Create pg_test_env.py file with connection parameters
        self._create_pg_test_env()

    def _create_pg_test_env(self):
        """Create pg_test_env.py file with connection parameters."""
        pg_test_env_path = Path(__file__).parent / "pg_test_env.py"
        
        with open(pg_test_env_path, "w") as f:
            f.write(f"""# PostgreSQL test environment parameters
# This file is auto-generated by setup_test_databases.py
# Do not edit manually

PG_TEST_PARAMS = {{
    "dbname": "{self.pg_config['database']}",
    "user": "{self.pg_config['user']}",
    "password": "{self.pg_config['password']}",
    "host": "{self.pg_config['host']}",
    "port": "{self.pg_config['port']}"
}}
""")
        logger.info(f"Created pg_test_env.py with connection parameters")

    def setup_all(self):
        """Set up all test databases."""
        success = True
        try:
            logger.info("Starting HADES test database setup")
            
            # Set up PostgreSQL
            try:
                self.setup_postgresql()
                logger.info("PostgreSQL setup completed successfully")
            except Exception as e:
                logger.error(f"PostgreSQL setup failed: {e}")
                success = False
            
            # Set up ArangoDB
            try:
                self.setup_arangodb()
                logger.info("ArangoDB setup completed successfully")
            except Exception as e:
                logger.error(f"ArangoDB setup failed: {e}")
                logger.warning("Continuing with partial setup (PostgreSQL only)")
                # Don't fail the entire setup if ArangoDB fails
                # This allows tests that only need PostgreSQL to run
            
            if success:
                logger.info("HADES test database setup completed successfully")
            else:
                logger.warning("HADES test database setup completed with warnings")
            return success
        except Exception as e:
            logger.error(f"Test database setup failed: {e}")
            return False

    def setup_postgresql(self):
        """Set up PostgreSQL test database."""
        logger.info("Setting up PostgreSQL test database")
        
        try:
            # First try to connect as postgres admin user
            try:
                # Try to connect as postgres admin user
                admin_conn = psycopg2.connect(
                    host=self.pg_config["host"],
                    port=self.pg_config["port"],
                    user="postgres",
                    database="postgres",
                    connect_timeout=3
                )
                admin_conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
                admin_cursor = admin_conn.cursor()
                
                # Check if user exists
                admin_cursor.execute(f"SELECT 1 FROM pg_roles WHERE rolname = %s", (self.pg_config["user"],))
                user_exists = admin_cursor.fetchone()
                
                # Create user if it doesn't exist
                if not user_exists:
                    logger.info(f"Creating PostgreSQL user {self.pg_config['user']}")
                    admin_cursor.execute(f"CREATE USER {self.pg_config['user']} WITH PASSWORD %s", (self.pg_config["password"],))
                else:
                    logger.info(f"PostgreSQL user {self.pg_config['user']} already exists")
                
                # Check if database exists
                admin_cursor.execute(f"SELECT 1 FROM pg_database WHERE datname = %s", (self.pg_config["database"],))
                db_exists = admin_cursor.fetchone()
                
                # Create database if it doesn't exist or force is True
                if not db_exists or self.force:
                    if db_exists and self.force:
                        logger.warning(f"Force flag set - dropping existing database {self.pg_config['database']}")
                        admin_cursor.execute(f"DROP DATABASE IF EXISTS {self.pg_config['database']}")
                    
                    logger.info(f"Creating PostgreSQL database {self.pg_config['database']}")
                    admin_cursor.execute(f"CREATE DATABASE {self.pg_config['database']} OWNER {self.pg_config['user']}")
                else:
                    logger.info(f"PostgreSQL database {self.pg_config['database']} already exists")
                
                # Grant privileges
                admin_cursor.execute(f"GRANT ALL PRIVILEGES ON DATABASE {self.pg_config['database']} TO {self.pg_config['user']}")
                
                # Close admin connection
                admin_cursor.close()
                admin_conn.close()
                
                logger.info("PostgreSQL admin operations completed successfully")
            except Exception as e:
                logger.warning(f"Could not connect as postgres admin: {e}")
                logger.info("Trying to connect as the configured user instead")
                
                # If we can't connect as postgres, try to connect as the configured user
                # This assumes the user and database already exist
                pass
            
            # Connect to the target database as the configured user
            conn = psycopg2.connect(
                host=self.pg_config["host"],
                port=self.pg_config["port"],
                user=self.pg_config["user"],
                password=self.pg_config["password"],
                database=self.pg_config["database"]
            )
            conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            cursor = conn.cursor()
            
            # Drop existing tables if force flag is set
            if self.force:
                logger.info("Force flag set - dropping existing tables")
                cursor.execute("DROP TABLE IF EXISTS rate_limits")
                cursor.execute("DROP TABLE IF EXISTS api_keys")
            
            # Create tables for auth testing
            logger.info("Creating PostgreSQL tables for auth testing")
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS api_keys (
                key_id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                key_hash TEXT NOT NULL UNIQUE,
                created_at TIMESTAMP NOT NULL,
                expires_at TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE
            )
            """)
            
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS rate_limits (
                key_id TEXT NOT NULL,
                requests INTEGER DEFAULT 1,
                window_start TIMESTAMP NOT NULL,
                expires_at TIMESTAMP NOT NULL
            )
            """)
            
            # Add indexes for rate_limits table
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_rate_limits_key_id ON rate_limits(key_id)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_rate_limits_expires ON rate_limits(expires_at)")
            
            # Create .pgpass file for passwordless authentication during tests
            pgpass_file = Path.home() / ".pgpass"
            pgpass_line = f"{self.pg_config['host']}:{self.pg_config['port']}:{self.pg_config['database']}:{self.pg_config['user']}:{self.pg_config['password']}"
            
            # Check if line already exists in .pgpass
            pgpass_exists = False
            if pgpass_file.exists():
                with open(pgpass_file, "r") as f:
                    if pgpass_line in f.read():
                        pgpass_exists = True
            
            # Add line to .pgpass if it doesn't exist
            if not pgpass_exists:
                logger.info(f"Adding entry to .pgpass file")
                with open(pgpass_file, "a") as f:
                    f.write(f"{pgpass_line}\n")
                os.chmod(pgpass_file, 0o600)
            
            # Close connection
            cursor.close()
            conn.close()
            
            logger.info("PostgreSQL test database setup completed successfully")
        except Exception as e:
            logger.error(f"PostgreSQL test database setup failed: {e}")
            raise

    def setup_arangodb(self):
        """Set up ArangoDB test database."""
        logger.info("Setting up ArangoDB test database")
        
        try:
            # Connect to ArangoDB with proper URL formatting
            logger.info(f"Connecting to ArangoDB at {self.arango_config['host']}")
            client = ArangoClient(hosts=self.arango_config["host"])
            
            # Connect directly as the hades user
            logger.info(f"Connecting as user '{self.arango_config['username']}'")
            
            # First, try to connect to _system database as hades to check if we have access
            try:
                sys_db = client.db(
                    "_system",
                    username=self.arango_config["username"],
                    password=self.arango_config["password"]
                )
                logger.info(f"Connected to _system database as {self.arango_config['username']}")
                
                # Check if our database exists
                if not sys_db.has_database(self.arango_config["database"]) or self.force:
                    if sys_db.has_database(self.arango_config["database"]) and self.force:
                        logger.warning(f"Force flag set - dropping existing database {self.arango_config['database']}")
                        sys_db.delete_database(self.arango_config["database"])
                    
                    # Create database
                    logger.info(f"Creating ArangoDB database {self.arango_config['database']}")
                    sys_db.create_database(self.arango_config["database"])
                    
                    # Grant access to the database
                    sys_db.update_permission(
                        username=self.arango_config["username"],
                        database=self.arango_config["database"],
                        permission="rw"
                    )
                else:
                    logger.info(f"ArangoDB database {self.arango_config['database']} already exists")
            except Exception as e:
                logger.warning(f"Could not connect to _system as {self.arango_config['username']}: {e}")
                logger.info("The hades user might not have access to _system database")
                
                # If we can't connect to _system as hades, we need to create the database first
                # This would require root access, but we'll skip this for now and assume the database exists
                logger.info("Assuming the database already exists and trying to connect to it directly")
            
            # Connect to the database as the configured user
            db = client.db(
                self.arango_config["database"],
                username=self.arango_config["username"],
                password=self.arango_config["password"]
            )
            
            # Create collections
            logger.info("Creating ArangoDB collections for testing")
            
            # Document collections
            for collection_name in ["entities", "relationships", "facts", "sources", 
                                   "embeddings", "versions", "change_logs", "metadata"]:
                if not db.has_collection(collection_name):
                    logger.info(f"Creating collection {collection_name}")
                    db.create_collection(collection_name)
                else:
                    logger.info(f"Collection {collection_name} already exists")
            
            # Edge collections
            for edge_name in ["entity_relationships", "entity_facts", "fact_sources"]:
                if not db.has_collection(edge_name):
                    logger.info(f"Creating edge collection {edge_name}")
                    db.create_collection(edge_name, edge=True)
                else:
                    logger.info(f"Edge collection {edge_name} already exists")
            
            # Create indexes
            logger.info("Creating ArangoDB indexes")
            
            # Entity indexes
            if db.has_collection("entities"):
                entities = db.collection("entities")
                if not any(idx["fields"] == ["entity_id"] for idx in entities.indexes()):
                    logger.info("Creating hash index on entities.entity_id")
                    entities.add_hash_index(fields=["entity_id"], unique=True)
            
            # Add a test entry to change_logs if it's empty
            if db.has_collection("change_logs") and db.collection("change_logs").count() == 0:
                logger.info("Adding test entry to change_logs")
                db.collection("change_logs").insert({
                    "_key": str(uuid.uuid4()),
                    "entity_id": "test/entity",
                    "previous_version": None,
                    "new_version": "v0.1.0",
                    "commit_id": str(uuid.uuid4()),
                    "timestamp": datetime.now(timezone.utc).isoformat(),
                    "changes": {
                        "added": {"name": "Test Entity"},
                        "removed": {},
                        "modified": {}
                    },
                    "commit_message": "Initial test entry for change_logs"
                })
            
            logger.info("ArangoDB test database setup completed successfully")
        except Exception as e:
            logger.error(f"ArangoDB test database setup failed: {e}")
            raise


def main():
    """Main entry point for test database setup."""
    parser = argparse.ArgumentParser(description="Set up HADES test databases")
    parser.add_argument(
        "--force", action="store_true", help="Force recreate databases if they exist"
    )
    parser.add_argument(
        "--postgresql-only", action="store_true", help="Set up only PostgreSQL database"
    )
    parser.add_argument(
        "--arangodb-only", action="store_true", help="Set up only ArangoDB database"
    )
    args = parser.parse_args()
    
    # Create test database setup instance
    db_setup = TestDatabaseSetup(force=args.force)
    
    # Set up databases based on arguments
    if args.postgresql_only:
        logger.info("Setting up PostgreSQL test database only")
        db_setup.setup_postgresql()
    elif args.arangodb_only:
        logger.info("Setting up ArangoDB test database only")
        db_setup.setup_arangodb()
    else:
        logger.info("Setting up all HADES test databases")
        success = db_setup.setup_all()
        sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
