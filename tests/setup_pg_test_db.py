#!/usr/bin/env python
"""
Setup script for PostgreSQL test database.
This script will check the PostgreSQL connection and create a test database if needed.
"""
import os
import sys
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

def get_connection_params():
    """Get PostgreSQL connection parameters from environment or defaults."""
    # Try to import test environment variables
    try:
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
        from pg_test_env import PG_TEST_PARAMS
        
        # Use parameters from pg_test_env.py but connect to postgres database first
        params = PG_TEST_PARAMS.copy()
        params["dbname"] = "postgres"  # Connect to default postgres database first
    except ImportError:
        # Default connection parameters if pg_test_env.py doesn't exist
        params = {
            "user": os.environ.get("PGUSER", os.environ.get("HADES_TEST_DB_USER", "postgres")),
            "password": os.environ.get("PGPASSWORD", os.environ.get("HADES_TEST_DB_PASSWORD", "")),
            "host": os.environ.get("PGHOST", os.environ.get("HADES_TEST_DB_HOST", "localhost")),
            "port": os.environ.get("PGPORT", os.environ.get("HADES_TEST_DB_PORT", "5432")),
            "dbname": "postgres"  # Connect to default postgres database first
        }
    
    print(f"Using PostgreSQL connection parameters:")
    print(f"  Host: {params['host']}")
    print(f"  Port: {params['port']}")
    print(f"  User: {params['user']}")
    print(f"  Database: {params['dbname']}")
    print(f"  Password: {'[provided]' if params['password'] else '[not provided]'}")
    
    return params

def create_test_database(params):
    """Create the test database if it doesn't exist."""
    # Get test database name from environment or default
    test_db_name = os.environ.get("HADES_TEST_DB_NAME", "hades_test")
    try:
        from pg_test_env import PG_TEST_PARAMS
        test_db_name = PG_TEST_PARAMS.get("dbname", test_db_name)
    except ImportError:
        pass
    conn = None
    try:
        # Connect to default postgres database
        print(f"Connecting to PostgreSQL server at {params['host']}:{params['port']} as {params['user']}...")
        conn = psycopg2.connect(**params)
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # Check if test database exists
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = %s", (test_db_name,))
        if cursor.fetchone():
            print(f"Test database '{test_db_name}' already exists.")
        else:
            # Create test database
            print(f"Creating test database '{test_db_name}'...")
            cursor.execute(f"CREATE DATABASE {test_db_name}")
            print(f"Test database '{test_db_name}' created successfully.")
        
        # Create a .pgpass file for passwordless authentication during tests
        home_dir = os.path.expanduser("~")
        pgpass_path = os.path.join(home_dir, ".pgpass")
        
        # Check if .pgpass already exists
        if not os.path.exists(pgpass_path):
            print(f"Creating .pgpass file at {pgpass_path}...")
            with open(pgpass_path, "w") as f:
                # Format: hostname:port:database:username:password
                f.write(f"{params['host']}:{params['port']}:{test_db_name}:{params['user']}:{params['password']}\n")
            
            # Set proper permissions (600) for .pgpass
            os.chmod(pgpass_path, 0o600)
            print(".pgpass file created with proper permissions.")
        else:
            print(".pgpass file already exists. Make sure it contains credentials for the test database.")
        
        # Create environment variables file for tests
        env_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "pg_test_env.py")
        with open(env_file, "w") as f:
            f.write(f"""\"\"\"
PostgreSQL test environment variables.
This file is auto-generated by setup_pg_test_db.py.
\"\"\"
# PostgreSQL connection parameters for tests
PG_TEST_PARAMS = {{
    "dbname": "{test_db_name}",
    "user": "{params['user']}",
    "password": "{params['password']}",
    "host": "{params['host']}",
    "port": "{params['port']}"
}}
""")
        print(f"Environment variables file created at {env_file}")
        
        return True
    except Exception as e:
        print(f"Error: {e}")
        return False
    finally:
        if conn:
            conn.close()

def main():
    """Main function."""
    print("Setting up PostgreSQL test database for HADES...")
    params = get_connection_params()
    
    # Try to connect to PostgreSQL server
    print(f"Connecting to PostgreSQL server at {params['host']}:{params['port']} as {params['user']}...")
    
    # Create the test database
    if create_test_database(params):
        # Create environment variables file for tests
        test_db_name = os.environ.get("HADES_TEST_DB_NAME", "hades_test")
        try:
            from pg_test_env import PG_TEST_PARAMS
            test_db_name = PG_TEST_PARAMS.get("dbname", test_db_name)
        except ImportError:
            pass
            
        print(f"\nPostgreSQL test database '{test_db_name}' setup completed successfully.")
        print("You can now run the tests with: pytest tests/unit/mcp/test_auth_real_db.py -v")
        return 0
    else:
        print("\nFailed to set up PostgreSQL test database.")
        print("Please check your PostgreSQL installation and credentials.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
