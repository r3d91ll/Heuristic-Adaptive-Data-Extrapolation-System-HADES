version: '3.8'

services:
  arangodb:
    build:
      context: .
      dockerfile: Dockerfile.arangodb
    command: >
      bash -c "
        apk add curl &&
        /entrypoint.sh --server.storage-engine=rocksdb"
    container_name: ${ARANGO_CONTAINER_NAME:-hades_arangodb}
    environment:
      # For local development, you can use a simple password
      - ARANGO_ROOT_PASSWORD=devpassword
      # For production, uncomment and set this:
      # - ARANGO_ROOT_PASSWORD=${ARANGO_ROOT_PASSWORD}
      # Additional security settings
      - ARANGO_NO_AUTH=0
      - ARANGO_STORAGE_ENGINE=rocksdb
    ports:
      - "${ARANGO_PORT:-8529}:8529"
    volumes:
      - arango_data:/var/lib/arangodb3
      - arango_apps:/var/lib/arangodb3-apps
    networks:
      - hades_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8529/_api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  milvus:
    image: milvusdb/milvus:2.3.0-20231010-3f59a15e-amd64
    container_name: ${MILVUS_CONTAINER_NAME:-hades_milvus}
    environment:
      # Local development can skip authentication
      # For production, uncomment and set these:
      # - MILVUS_USER=${MILVUS_USER:-root}
      # - MILVUS_PASSWORD=${MILVUS_PASSWORD}
      # Additional Milvus configurations
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    ports:
      - "${MILVUS_PORT:-19530}:19530"
    volumes:
      - milvus_data:/var/lib/milvus
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - hades_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19530/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Milvus dependencies
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: ${ETCD_CONTAINER_NAME:-hades_etcd}
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    networks:
      - hades_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: ${MINIO_CONTAINER_NAME:-hades_minio}
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "${MINIO_PORT:-9081}:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - hades_network
    restart: unless-stopped
    command: server /data --console-address ":9001"

networks:
  hades_network:
    name: ${DOCKER_NETWORK_NAME:-hades_network}
    driver: bridge

volumes:
  arango_data:
    name: ${ARANGO_DATA_VOLUME:-hades_arango_data}
  arango_apps:
    name: ${ARANGO_APPS_VOLUME:-hades_arango_apps}
  milvus_data:
    name: ${MILVUS_DATA_VOLUME:-hades_milvus_data}
  etcd_data:
    name: ${ETCD_DATA_VOLUME:-hades_etcd_data}
  minio_data:
    name: ${MINIO_DATA_VOLUME:-hades_minio_data}
